import pytest
import pandas as pd
from src.features import add_stock_features, add_imbalance_features


@pytest.fixture
def stock_data():
    data = {
        "stock_id": range(1, 11),
        "date_id": [i for i in range(10)],
        "seconds_in_bucket": [i * 10 for i in range(10)],
        "imbalance_size": [i * 100 for i in range(10)],
        "imbalance_buy_sell_flag": [1 if i % 2 == 0 else 0 for i in range(10)],
        "reference_price": [100 + i for i in range(10)],
        "matched_size": [i * 10 for i in range(10)],
        "far_price": [105 + i for i in range(10)],
        "near_price": [95 + i for i in range(10)],
        "bid_price": [101 + i for i in range(10)],
        "bid_size": [50 for _ in range(10)],
        "ask_price": [102 + i for i in range(10)],
        "ask_size": [50 for _ in range(10)],
        "wap": [101.5 + i * 0.5 for i in range(10)],
    }
    return pd.DataFrame(data)


@pytest.fixture
def stock_weights():
    return {i: 0.1 for i in range(200)}


@pytest.fixture
def global_stock_id_feats():
    s_len = 200
    return {
        name: pd.Series(
            data=[0.1 for _ in range(s_len)],
            index=pd.Index(list(range(s_len)), name=name),
        )
        for name in [
            "median_size",
            "std_size",
            "ptp_size",
            "median_price",
            "std_price",
            "ptp_price",
        ]
    }


def test_add_stock_features(stock_data, global_stock_id_feats):
    result = add_stock_features(stock_data, global_stock_id_feats)

    assert len(result) == len(stock_data)

    expected_columns = [
        "stock_id",
        "date_id",
        "seconds_in_bucket",
        "imbalance_size",
        "imbalance_buy_sell_flag",
        "reference_price",
        "matched_size",
        "far_price",
        "near_price",
        "bid_price",
        "bid_size",
        "ask_price",
        "ask_size",
        "wap",
        "dow",
        "seconds",
        "minute",
        "time_to_market_close",
        "global_median_size",
        "global_std_size",
        "global_ptp_size",
        "global_median_price",
        "global_std_price",
        "global_ptp_price",
    ]
    assert all(col in result.columns for col in expected_columns)


def test_add_imbalance_features(stock_data, stock_weights):
    result = add_imbalance_features(stock_data, stock_weights)

    assert len(result) == len(stock_data)
    expected_columns = [
        "stock_id",
        "date_id",
        "seconds_in_bucket",
        "imbalance_size",
        "imbalance_buy_sell_flag",
        "reference_price",
        "matched_size",
        "far_price",
        "near_price",
        "bid_price",
        "bid_size",
        "ask_price",
        "ask_size",
        "wap",
        "volume",
        "mid_price",
        "liquidity_imbalance",
        "matched_imbalance",
        "size_imbalance",
        "reference_price_far_price_imb",
        "reference_price_near_price_imb",
        "reference_price_ask_price_imb",
        "reference_price_bid_price_imb",
        "reference_price_wap_imb",
        "far_price_near_price_imb",
        "far_price_ask_price_imb",
        "far_price_bid_price_imb",
        "far_price_wap_imb",
        "near_price_ask_price_imb",
        "near_price_bid_price_imb",
        "near_price_wap_imb",
        "ask_price_bid_price_imb",
        "ask_price_wap_imb",
        "bid_price_wap_imb",
        "ask_price_bid_price_wap_imb2",
        "ask_price_bid_price_reference_price_imb2",
        "ask_price_wap_reference_price_imb2",
        "bid_price_wap_reference_price_imb2",
        "matched_size_bid_size_ask_size_imb2",
        "matched_size_bid_size_imbalance_size_imb2",
        "matched_size_ask_size_imbalance_size_imb2",
        "bid_size_ask_size_imbalance_size_imb2",
        "stock_weights",
        "weighted_wap",
        "wap_momentum",
        "imbalance_momentum",
        "price_spread",
        "spread_intensity",
        "price_pressure",
        "market_urgency",
        "depth_pressure",
        "spread_depth_ratio",
        "mid_price_movement",
        "micro_price",
        "relative_spread",
        "all_prices_mean",
        "all_sizes_mean",
        "all_prices_std",
        "all_sizes_std",
        "all_prices_skew",
        "all_sizes_skew",
        "all_prices_kurt",
        "all_sizes_kurt",
        "matched_size_shift_1",
        "matched_size_ret_1",
        "matched_size_shift_3",
        "matched_size_ret_3",
        "matched_size_shift_5",
        "matched_size_ret_5",
        "matched_size_shift_10",
        "matched_size_ret_10",
        "imbalance_size_shift_1",
        "imbalance_size_ret_1",
        "imbalance_size_shift_3",
        "imbalance_size_ret_3",
        "imbalance_size_shift_5",
        "imbalance_size_ret_5",
        "imbalance_size_shift_10",
        "imbalance_size_ret_10",
        "reference_price_shift_1",
        "reference_price_ret_1",
        "reference_price_shift_3",
        "reference_price_ret_3",
        "reference_price_shift_5",
        "reference_price_ret_5",
        "reference_price_shift_10",
        "reference_price_ret_10",
        "imbalance_buy_sell_flag_shift_1",
        "imbalance_buy_sell_flag_ret_1",
        "imbalance_buy_sell_flag_shift_3",
        "imbalance_buy_sell_flag_ret_3",
        "imbalance_buy_sell_flag_shift_5",
        "imbalance_buy_sell_flag_ret_5",
        "imbalance_buy_sell_flag_shift_10",
        "imbalance_buy_sell_flag_ret_10",
        "ask_price_diff_1",
        "ask_price_diff_3",
        "ask_price_diff_5",
        "ask_price_diff_10",
        "bid_price_diff_1",
        "bid_price_diff_3",
        "bid_price_diff_5",
        "bid_price_diff_10",
        "ask_size_diff_1",
        "ask_size_diff_3",
        "ask_size_diff_5",
        "ask_size_diff_10",
        "bid_size_diff_1",
        "bid_size_diff_3",
        "bid_size_diff_5",
        "bid_size_diff_10",
        "weighted_wap_diff_1",
        "weighted_wap_diff_3",
        "weighted_wap_diff_5",
        "weighted_wap_diff_10",
        "price_spread_diff_1",
        "price_spread_diff_3",
        "price_spread_diff_5",
        "price_spread_diff_10",
        "price_change_diff_3",
        "size_change_diff_3",
        "price_change_diff_5",
        "size_change_diff_5",
        "price_change_diff_10",
        "size_change_diff_10",
        "rolling_diff_ask_price_3",
        "rolling_std_diff_ask_price_3",
        "rolling_diff_bid_price_3",
        "rolling_std_diff_bid_price_3",
        "rolling_diff_ask_size_3",
        "rolling_std_diff_ask_size_3",
        "rolling_diff_bid_size_3",
        "rolling_std_diff_bid_size_3",
        "rolling_diff_ask_price_5",
        "rolling_std_diff_ask_price_5",
        "rolling_diff_bid_price_5",
        "rolling_std_diff_bid_price_5",
        "rolling_diff_ask_size_5",
        "rolling_std_diff_ask_size_5",
        "rolling_diff_bid_size_5",
        "rolling_std_diff_bid_size_5",
        "rolling_diff_ask_price_10",
        "rolling_std_diff_ask_price_10",
        "rolling_diff_bid_price_10",
        "rolling_std_diff_bid_price_10",
        "rolling_diff_ask_size_10",
        "rolling_std_diff_ask_size_10",
        "rolling_diff_bid_size_10",
        "rolling_std_diff_bid_size_10",
        "mid_price*volume",
        "harmonic_imbalance",
    ]
    assert all(col in result.columns for col in expected_columns)
